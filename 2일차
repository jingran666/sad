### 1. **전역 스코프와 함수 스코프에 대한 이해**

```jsx
var x = 10;

function example() {
  console.log(x);
  var x = 20;
  console.log(x);
}

example();
```

- 출력 결과는 무엇인가요? 그리고 그 이유를 설명하세요.

---undefined와 20.example() 함수를 호출하면 첫 번째 console.log(x)에서 undefined가 출력되고, 두 번째 console.log(x)에서 20이 출력됩니다.

### 2. **IIFE(즉시 실행 함수) 동작 이해**

```jsx
(function() {
  var a = 5;
  console.log(a);
})();

console.log(a);
```

- 위 코드에서 콘솔에 출력되는 값은 무엇이며, 외부에서 `a`에 접근할 수 없는 이유를 설명하세요.

---5와 ReferenceError.IIFE 내부에서 5가 출력되고, IIFE 외부에서 a에 접근하려고 하면 ReferenceError가 발생합니다.

### 3. **`this` 바인딩 규칙 1: 전역 컨텍스트**

```jsx
function showThis() {
  console.log(this);
}

showThis();
```

- 위 코드에서 `this`가 가리키는 값은 무엇인가요? (브라우저 환경 기준)

---브라우저 환경에서는 showThis() 호출 시 this가 Window 객체를 가리킵니다.

### 4. **`this` 바인딩 규칙 2: 메서드 호출**

```jsx
const car = {
  brand: 'Toyota',
  displayBrand() {
    console.log(this.brand);
  }
};

car.displayBrand();
```

- `this`는 무엇을 가리키며, 출력 결과는 무엇인가요?
car.displayBrand()를 호출할 때, this는 car 객체를 가리킵니다. 출력 결과는 Toyota입니다.
---

### 5. **`call()`을 사용한 명시적 바인딩**

```jsx
const person = { name: 'Gyejin' };

function sayHello() {
  console.log(`Hello, ${this.name}`);
}

sayHello.call(person);
```

- `call()` 메서드를 사용했을 때 `this`가 가리키는 값과 출력 결과는 무엇인가요?
sayHello.call(person)을 호출했을 때, this는 person 객체를 가리킵니다. 출력 결과는 Hello, Gyejin입니다.
---

### 6. **`bind()` 메서드를 활용한 바인딩**

```jsx
function greet() {
  console.log(`Hello, ${this.name}`);
}

const person = { name: 'Gyejin' };
const boundGreet = greet.bind(person);

boundGreet();
```

- `bind()` 메서드를 사용한 후 함수 `boundGreet()`를 호출했을 때의 출력 결과는 무엇인가요?
boundGreet()를 호출했을 때의 출력 결과는 Hello, Gyejin입니다.
---

### 7. **프로토타입 상속**

```jsx
function Animal(type) {
  this.type = type;
}

Animal.prototype.speak = function() {
  console.log(`${this.type} makes a sound.`);
};

const dog = new Animal('Dog');

dog.speak();
```

- 프로토타입을 통해 상속된 메서드 `speak()`가 어떤 객체에서 호출되며, 출력 결과는 무엇인가요?
speak() 메서드는 dog 객체에서 호출되며, 출력 결과는 Dog makes a sound.입니다.
---

### 8. **콜 스택과 비동기 함수의 순서**

```jsx
console.log('Start');

setTimeout(() => {
  console.log('Timeout');
}, 1000);

console.log('End');
```

- 위 코드를 실행하면 출력 순서는 어떻게 되고, 그 이유는 무엇인가요?
Start
End
Timeout
동기적 코드 실행:

console.log('Start');는 동기적으로 실행됩니다. 이 줄이 실행되면 'Start'가 출력됩니다.
setTimeout 함수:

setTimeout(() => { console.log('Timeout'); }, 1000);는 비동기 함수입니다. 이 함수는 1000ms(1초) 후에 지정된 콜백 함수를 실행하도록 예약합니다. 이 호출은 즉시 반환되므로, 다음 코드로 넘어갑니다. 이 시점에서 'Timeout'은 출력되지 않고, 타이머가 설정됩니다.
다음 동기적 코드 실행:

console.log('End'); 역시 동기적으로 실행됩니다. 이 줄이 실행되면 'End'가 출력됩니다.
비동기 콜백 실행:

1000ms가 경과한 후, 설정된 타이머에 의해 setTimeout의 콜백 함수가 호출되고, console.log('Timeout');가 실행됩니다. 이때 'Timeout'이 출력됩니다.
---

### 9. **마이크로태스크 큐와 태스크 큐의 차이**

```jsx
console.log('Start');

setTimeout(() => {
  console.log('Timeout');
}, 0);

Promise.resolve().then(() => {
  console.log('Promise');
});

console.log('End');
```

- 위 코드에서 출력 순서와 그 이유를 설명하세요.
Start
End
Promise
Timeout
동기적 코드 실행:

console.log('Start');가 가장 먼저 실행되어 'Start'가 출력됩니다.
setTimeout 함수:

setTimeout(() => { console.log('Timeout'); }, 0);는 비동기 함수입니다. 타이머가 설정되지만, 지연 시간이 0인 경우에도 해당 콜백은 이벤트 큐에 들어가야 하므로, 바로 실행되지 않고 다음 코드로 넘어갑니다.
Promise:

Promise.resolve().then(() => { console.log('Promise'); });는 마이크로태스크 큐에 콜백을 추가합니다. Promise가 해결되면, 그에 따라 연결된 .then() 블록이 실행됩니다. 마이크로태스크 큐의 콜백은 현재 실행 중인 스택이 비어질 때까지 실행되지 않습니다.
다음 동기적 코드 실행:

console.log('End');가 실행되어 'End'가 출력됩니다.
마이크로태스크 실행:

현재 스택이 비어지면, 마이크로태스크 큐에 있는 Promise 콜백이 실행됩니다. 따라서 'Promise'가 출력됩니다.
타이머 콜백 실행:

마지막으로, 이벤트 큐에 있는 setTimeout 콜백이 실행되며 'Timeout'이 출력됩니다.
결론:
이 과정에서 동기적 코드는 먼저 실행되고, 그 다음에 마이크로태스크(Promise), 그리고 마지막으로 매크로태스크(setTimeout)가 실행됩니다. 따라서 출력 순서는 Start, End, Promise, Timeout입니다.
---

### 10. **Strict 모드에서의 오류 탐지**

```jsx

"use strict";

x = 5;

console.log(x);
```

- 위 코드에서 발생하는 오류와 그 이유를 설명하세요.
발생하는 오류는 ReferenceError: x is not defined입니다.
"use strict";로 인해 변수를 선언하지 않고 사용하려고 할 때 ReferenceError가 발생하며, 이는 엄격 모드가 변수를 안전하게 관리하도록 강제하기 때문입니다.

---

### 11. **클로저를 이용한 상태 유지**

```jsx
function createCounter() {
  let count = 0;

  return function() {
    count++;
    console.log(count);
  };
}

const counter = createCounter();

counter();
counter();
```

- 클로저를 사용했을 때, `count` 변수의 상태는 어떻게 유지되며, 출력 결과는 무엇인가요?
클로저를 사용하면 count 변수가 함수 외부에서도 유지되며, 각 호출에서 그 상태가 지속적으로 변경됩니다. 출력 결과는 1과 2입니다.
---

### 12. **화살표 함수에서의 `this` 바인딩**

```jsx
const person = {
  name: 'Gyejin',
  greet: () => {
    console.log(this.name);
  }
};

person.greet();
```

- 화살표 함수 `greet()`에서 `this`가 가리키는 것은 무엇이며, 출력 결과는 무엇인가요?
person.greet()를 호출하면 this가 전역 객체를 가리키게 되고, this.name은 undefined이므로 출력 결과는 undefined입니다.
---

### 13. **`setTimeout`과 `this` 바인딩 문제 해결**

```jsx
const user = {
  name: 'Gyejin',
  greet() {
    setTimeout(function() {
      console.log(this.name);
    }, 1000);
  }
};

user.greet();
```

- 위 코드에서 `this.name`이 제대로 출력되지 않는 이유는 무엇이며, 이를 해결하는 방법을 설명하세요.
this.name이 제대로 출력되지 않는 이유는 setTimeout의 콜백 함수가 일반 함수로 호출되기 때문입니다. 이 경우 this는 전역 객체를 가리키게 되어 user.name에 접근할 수 없습니다. 결과적으로 undefined가 출력됩니다.
---

### 14. **Promise의 기본 이해**

```jsx
const promise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('Success');
  }, 1000);
});

promise.then((result) => {
  console.log(result);
});
```

- 위 Promise의 실행 흐름과 최종 출력 결과를 설명하세요.
1초 후에 콘솔에 Success가 출력됩니다.

결론적으로, Promise는 비동기적으로 작동하여 1초 후에 'Success'라는 값을 출력하게 됩니다.
---

### 15. **`async/await`를 이용한 비동기 함수 제어**

```jsx
async function fetchData() {
  const data = await new Promise((resolve) => {
    setTimeout(() => {
      resolve('Fetched Data');
    }, 1000);
  });

  console.log(data);
}

fetchData();
```

- `async/await`를 사용한 비동기 함수의 실행 흐름과 출력 결과를 설명하세요.
fetchData 함수가 호출되면, 내부에서 비동기적으로 Promise를 생성하고 await를 사용하여 그 결과를 기다립니다. 1초 후에 비동기 작업이 완료되고, 최종적으로 'Fetched Data'가 출력됩니다.
---

### 16. **호이스팅이 발생하는 경우**

```jsx
console.log(a);

var a = 10;
```

- 위 코드에서 `a`의 값은 무엇으로 출력되며, 그 이유는 무엇인가요?
console.log(a);는 undefined를 출력합니다. 이는 a가 호이스팅되어 선언되었지만, 값이 할당되기 전에 접근했기 때문입니다.
---

### 17. **`let`과 `const`에서의 호이스팅 차이**

```jsx
console.log(b);

let b = 10;
```

- `let`으로 선언된 변수가 호이스팅되지 않는 것처럼 보이는 이유는 무엇인가요?
console.log(b);를 실행하면 ReferenceError: Cannot access 'b' before initialization 오류가 발생합니다. 이는 let으로 선언된 변수가 호이스팅되지 않는 것처럼 보이는 이유를 설명합니다.
---

### 18. **생성자 함수에서 `this`의 역할**

```jsx
function Car(model) {
  this.model = model;
}

const myCar = new Car('Tesla');

console.log(myCar.model);
```

- 생성자 함수에서 `this`가 가리키는 객체는 무엇이며, 출력 결과는 무엇인가요?
주어진 코드에서 생성자 함수 Car를 사용하여 객체를 생성할 때, this가 가리키는 객체는 생성된 인스턴스인 myCar입니다. 출력 결과는 'Tesla'입니다.
---

### 19. **이벤트 루프의 동작 원리**

```jsx
console.log('Start');

setTimeout(() => {
  console.log('Timeout');
}, 0);

console.log('End');
```

- 이벤트 루프가 `setTimeout`을 처리하는 방식에 대해 설명하고, 출력 순서를 예측하세요.
코드실행, settimeout 함수 동기적 코드실해으 이벤트 큐의 ㅡ처리 최종출력 순서 1start, 2end, 3 timeout
이벤트 루프는 비동기 작업을 메인 스레드가 비어있을 때 처리하므로, 이 코드는 위와 같은 순서로 출력을 생성합니다.
---

### 20. **프로미스 체인의 동작 이해**

```jsx
new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('First Promise');
  }, 1000);
})
  .then((result) => {
    console.log(result);
    return 'Second Promise';
  })
  .then((result) => {
    console.log(result);
  });
```

- 프로미스 체인이 어떻게 동작하는지 설명하고, 최종 출력 결과를 예측하세요.
1.promise생성, 2.1초대기, 3.첫번째 then 실행후 4번번쨰 then 실행
최종 출력 결과:
First Promise (1초 후)
Second Promise
코드를 실행하면 1초 후에 'First Promise'가 출력되고, 그 다음에 'Second Promise'가 출력됩니다.
